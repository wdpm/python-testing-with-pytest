寻找插件

https://docs.pytest.org/en/latest/reference/plugin_list.html
https://pypi.org
https://github.com/pytest-dev
https://docs.pytest.org/en/latest/how-to/plugins.html

---
## Plugins That Change the Normal Test Run Flow

Sometimes it’s nice to change that order. The following plugins in some way
change the normal test run flow:

• pytest-order—Allows us to specify the order using a marker
• pytest-randomly—Randomizes the order, first by file, then by class, then by
test
• pytest-repeat—Makes it easy to repeat a single test, or multiple tests, a
specific number of times
• pytest-rerunfailures—Re-runs failed tests. Helpful for flaky tests
• pytest-xdist—Runs tests in parallel, either using multiple CPUs on one
machine, or multiple remote machine

## Plugins That Alter or Enhance Output

• pytest-instafail—Adds an --instafail flag that reports tracebacks and output
from failed tests right after the failure. Normally, pytest reports tracebacks
and output from failed tests after all tests have completed.
• pytest-sugar—Shows green checkmarks instead of dots for passing tests
and has a nice progress bar. It also shows failures instantly, like pytest-
instafail.
• pytest-html—Allows for html report generation. Reports can be extended
with extra data and images, such as screenshots of failure cases

## Plugins for Web Development

pytest-selenium—Provides fixtures to allow for easy configuration of browser-
based tests. Selenium is a popular tool for browser testing.

• pytest-splinter—Built on top of Selenium as a higher level interface, this
allows Splinter to be used more easily from pytest.
• pytest-django and pytest-flask—Help make testing Django and Flask applica-
tions easier with pytest. Django and Flask are two of the most popular
web frameworks for Python

## Plugins for Fake Data

• Faker—Generates fake data for you. Provides faker fixture for use with pytest
• model-bakery—Generates Django model objects with fake data.
• pytest-factoryboy—Includes fixtures for Factory Boy, a database model data
generator

## Plugins That Extend pytest Functionality

• pytest-cov—Runs coverage while testing
• pytest-benchmark—Runs benchmark timing on code within tests
• pytest-timeout—Doesn’t let tests run too long
• pytest-asyncio—Tests async functions
• pytest-bdd—Writes behavior-driven development (BDD)–style tests with pytest
• pytest-freezegun—Freezes time so that any code that reads the time will get
the same value during a test. You can also set a particular date or time.
• pytest-mock—A thin-wrapper around the unittest.mock patching API

---
## run on parallel

pytest test_parallel.py

1s

---
pip install pytest-repeat
pytest --count=10 test_parallel.py

10s

---
pip install pytest-xdist
pytest --count=10 -n=4 test_parallel.py

5s 为何是5s，而不是3s左右呢？process spawn的开销有2s左右？

---

pytest --count=10 -n=auto test_parallel.py

本地8核，结果5s

---

pytest --count=6 -n=6 test_parallel.py

3.64s 看来进程开销很大。

---

pytest --count=60 -n=6 test_parallel.py

12.97s 当任务数很大时，会趋向于正常的评估结果。

## Randomizing Test Order

To randomize the order, install pytest-randomly:
$ pip install pytest-randomly
$ pytest -v